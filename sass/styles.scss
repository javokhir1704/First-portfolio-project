* {
    padding: 0;
    margin: 0;
    box-sizing: border-box;

    scroll-behavior: smooth; // to get smooth scrolling effect
}

:root { //The :root selector matches the document's root element. In HTML, the root element is always the html element.
    --main-white:#f0f0f0;
    --main-red:#be3144;
    --main-blue: #45567d;
    --main-gray: #303841; 
}

body {
    font-family: 'Poppins', sans-serif;
    font-size: 1.8rem;
    font-weight: 400;
    line-height: 1.4;
    color: var(--main-white);
    height: 100vh;
}

.nav {
    background: var(--main-red);
    box-shadow: 0 2px 0 rgba(0,0,0,0.4); //h-offset v-offset

    display: flex;
    justify-content: flex-end;
    align-content: center;
    position: fixed;
    z-index: 10;

    top: 0;
    left: 0;
    width: 100%;

    

    &-list { // The &(it's called ampersand) always refers to the parent selector when nesting.
        display: flex;
        margin-right: 2rem;
        list-style: none;

        
        a {
            display: block;
            font-size: 22px;
            padding: 20px;

            text-decoration: none;
            color: var(--main-white);
            transition: background 0.15s;

            &:hover {
                background: var(--main-blue);
            }

            &:active {
                opacity: 0.7;
            }
        }
    }
}

.welcom-section {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100vh; // so that it takes up full width of viewport of device
    background-color: #000;
    background-image: linear-gradient(62deg, #3a3d40 0%, #181719 100%);

    h1 {
        font-size: 60px;
    }

    p {
        font-size: 2rem;
        font-weight: 200;
        font-style: italic;
        color: var(--main-red);
    }
}

h1,
h2 {
    font-family: 'Raleway', sans-serif;
    font-weight: 700;
    text-align: center;
}

.projects-section {
    background:var(--main-blue);

    text-align: center;
    padding: 6rem 1rem;

    .projects-section-header { // h2
        max-width: 640px;
        margin:0 auto 4rem auto;
        border-bottom: 2px solid var(--main-white);

        font-size: 2.6rem;
    }

    .projects-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
        /* minmax() value of "grid-template-columns"' property:

            The minmax() function accepts two arguments: a minimum length value and a maximum length value. And what that tells a grid container is that the grid-template-columns can be no "narrower" than the minimum value, but no "wider" than the maximum value

             The "auto-fit" keyword is used to automatically fit as many columns as possible into the available space. The "minmax(320px, 1fr)" function is used to define the minimum and maximum size of each column.

             The number of columns in your grid layout will depend on the width of the grid container and the minimum width you've specified for each column.

             When you use auto-fit with repeat in the grid-template-columns property, the grid will create as many columns as possible based on the minimum width you've specified (320px in this case) and the available space in the grid container.
        */
        grid-gap:2.5rem;
        width: 100%;
        max-width: 1280px;// can't be wider from this value
        margin: 0 auto;
        margin-bottom: 6rem;

        a.project { // only 'a' elements with class="project" will be styled
            background: var(--main-gray);
            box-shadow: 1px 1px 2px rgba(0,0,0,0.5);
            border-radius: 2px;

            text-decoration: none; // to get rid of "underlines"
            color: var(--main-white);

            display:flex;
            flex-direction: column;

            height: 400px;

            img.project-image {
                // height: calc(100% - 6.8rem);
                height: 100%;
                width: 100%;
                object-fit: cover;
                flex-grow: 1; //The flex-grow property specifies how much a flex item will grow relative to the rest of the flex items.
            }

            p.project-title {
                font-size: 1.3rem;
                padding: 1rem 0.5rem;
                
                span.code {// only 'span' elements with class="code" will be styled
                    color: var(--main-gray);
                    transition: color 0.3s ease-out;
                }
            }

            &:hover p.project-title span.code { // When you hover over, span gets stylied
                color: rgb(255, 181, 44);
            }
        }
    }

    a.btn-show-all {
        font-size: 1.3rem;
        color: var(--main-white);
        background:var(--main-gray);
        text-decoration: none;
        padding: 0.8rem 1.8rem;
        border-radius: 2px;
        transition: background 0.3s ease-out;

        &:hover { // referring to the parent element which is "a.btn-show-all"
            background:var(--main-red);
        }

        i.fas {
            font-size:20px;

            margin-left: 5px;
            transform: translateX(0);
            transition: transform 0.3s ease-out;

        }

        &:hover i.fas { // for icon when the button get hovered over, it is translated to X direction
            transform: translateX(2px);
        }
    }
}

.contact-section {
    background:var(--main-gray);
    padding:0 1rem;
    width: 100%;
    height: 80vh;

    display: flex;
    flex-direction: column;
    justify-content: center;
    align-content: center;
    text-align: center;

    .contact-section-header {

        h2 {
            font-size: 3.8rem;
        }

        p {
            font-style: italic;
            font-size: 18px;

        }
    }

    .contact-links {
        width: 100%;
        // max-width: 980px; may cause a bug
        margin-top: 4rem;

        display: flex;
        justify-content: center;
        flex-wrap: wrap;

        a.contact-details {
            font-size: 1.5rem;
            text-shadow: 2px 2px 1px #1f1f1f;
            transform: translateY(0); //vertical position
            transition: transform 0.3s ease-out;

            display: inline-block;
            padding:10px 20px;
            border-radius: 2px;

            text-decoration: none;
            color:var(--main-white);

            &:hover {
                transform: translateY(5px);
            }
        }
    }
}

footer {
    font-weight: 300;
    display: flex;
    justify-content: space-evenly;
    padding: 20px;
    background: var(--main-gray);
    border-top: 4px solid var(--main-red);

    p {
        margin: 20px;
        font-size: 18px;
        a {
            text-decoration: none;
            color:var(--main-red);
            transition: opacity 0.15s;
            &:hover {
                opacity: 0.7;
            }

            &:active {
                opacity: 0.5;
            }
        }
    }
}


@media (max-width:580px) {
    html { // for the p's of footer
        p {
            font-size: 0.8rem;;
        }
    }

    .nav {
        background: var(--main-red);
        box-shadow: 0 2px 0 rgba(0,0,0,0.4); //h-offset v-offset
    
        display: flex;
        justify-content: center;
        align-content: center;
        position: fixed;
        z-index: 10;
    
        top: 0;
        left: 0;
        width: 100%;
    
        
    
        &-list { // The &(it's called ampersand) always refers to the parent selector when nesting.
            display: flex;
            margin-right: 2rem;
            list-style: none;
    
            
            a {
                display: block;
                font-size: 22px;
                padding: 20px;
    
                text-decoration: none;
                color: var(--main-white);
                transition: background 0.15s;
    
                &:hover {
                    background: var(--main-blue);
                }
    
                &:active {
                    opacity: 0.7;
                }
            }
        }
    }

    .welcom-section {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        width: 100%;
        height: 100vh; // so that it takes up full width of viewport of device
        background-color: #000;
        background-image: linear-gradient(62deg, #3a3d40 0%, #181719 100%);
    
        h1 {
            font-size: 3rem;
        }
    
        p {
            font-size: 1.5rem;
            font-weight: 200;
            font-style: italic;
            color: var(--main-red);
        }
    }

    .projects-section {
        background:var(--main-blue);
    
        text-align: center;
        padding: 6rem 1rem;
    
        .projects-section-header { // h2
            max-width: 640px;
            margin:0 auto 3rem auto;
            border-bottom: 2px solid var(--main-white);
    
            font-size: 1.6rem;
        }
    
        .projects-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
            /* minmax() value of "grid-template-columns"' property:
    
                The minmax() function accepts two arguments: a minimum length value and a maximum length value. And what that tells a grid container is that the grid-template-columns can be no "narrower" than the minimum value, but no "wider" than the maximum value
    
                 The "auto-fit" keyword is used to automatically fit as many columns as possible into the available space. The "minmax(320px, 1fr)" function is used to define the minimum and maximum size of each column.
    
                 The number of columns in your grid layout will depend on the width of the grid container and the minimum width you've specified for each column.
    
                 When you use auto-fit with repeat in the grid-template-columns property, the grid will create as many columns as possible based on the minimum width you've specified (320px in this case) and the available space in the grid container.
            */
            grid-gap:2rem;
            width: 100%;
            max-width: 1280px;// can't be wider from this value
            margin: 0 auto;
            margin-bottom: 6rem;
    
            a.project { // only 'a' elements with class="project" will be styled
                background: var(--main-gray);
                box-shadow: 1px 1px 2px rgba(0,0,0,0.5);
                border-radius: 2px;
    
                text-decoration: none; // to get rid of "underlines"
                color: var(--main-white);
    
                display:flex;
                flex-direction: column;
    
                height: 400px;
    
                img.project-image {
                    // height: calc(100% - 6.8rem);
                    height: 100%;
                    width: 100%;
                    object-fit: cover;
                    flex-grow: 1; //The flex-grow property specifies how much a flex item will grow relative to the rest of the flex items.
                }
    
                p.project-title {
                    font-size: 1.3rem;
                    padding: 1rem 0.5rem;
                    
                    span.code {// only 'span' elements with class="code" will be styled
                        color: var(--main-gray);
                        transition: color 0.3s ease-out;
                    }
                }
    
                &:hover p.project-title span.code { // When you hover over, span gets stylied
                    color: rgb(255, 181, 44);
                }
            }
        }
    
        a.btn-show-all {
            font-size: 1.3rem;
            color: var(--main-white);
            background:var(--main-gray);
            text-decoration: none;
            padding: 0.8rem 1.8rem;
            border-radius: 2px;
            transition: background 0.3s ease-out;
    
            &:hover { // referring to the parent element which is "a.btn-show-all"
                background:var(--main-red);
            }
    
            i.fas {
                font-size:20px;
    
                margin-left: 5px;
                transform: translateX(0);
                transition: transform 0.3s ease-out;
    
            }
    
            &:hover i.fas { // for icon when the button get hovered over, it is translated to X direction
                transform: translateX(2px);
            }
        }
    }

    .contact-section {
        background:var(--main-gray);
        padding:0 1rem;
        width: 100%;
        height: 50vh;
    
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-content: center;
        text-align: center;
    
        .contact-section-header {
    
            h2 {
                font-size: 3rem;
            }
    
            p {
                font-style: italic;
                font-size: 18px;
    
            }
        }
    
        .contact-links {
            width: 100%;
            // max-width: 980px; may cause a bug
            margin-top: 4rem;
    
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
    
            a.contact-details {
                font-size: 1rem;
                text-shadow: 2px 2px 1px #1f1f1f;
                transform: translateY(0); //vertical position
                transition: transform 0.3s ease-out;
    
                display: inline-block;
                padding:10px 20px;
                border-radius: 2px;
    
                text-decoration: none;
                color:var(--main-white);
    
                &:hover {
                    transform: translateY(5px);
                }
            }
        }
    }
}



